<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
						   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
						   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
						   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">

	<aop:config proxy-target-class="true"></aop:config>
	<!-- 自动扫描且只扫描@Controller -->
	<context:component-scan base-package="cn.wsalix"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- <mvc:annotation-driven/>相当于注册了RequestMappingHandlerMapping和RequestMappingHandlerAdapter两个bean -->
	<mvc:annotation-driven>
		<mvc:argument-resolvers>
			<bean
				class="org.springframework.data.web.PageableHandlerMethodArgumentResolver" />
		</mvc:argument-resolvers>
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageCOnverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper">
					<bean class="cn.wsalix.json.NullObjectMapper" />
				</property>
				<property name="supportedMediaTypes">
					<list>
						<value>text/plain;charset=UTF-8</value>
						<value>application/json;charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- 默认 servlet 处理器接入 -->
	<mvc:default-servlet-handler />
	<!-- 会把"/**" url,注册到SimpleUrlHandlerMapping的urlMap中,把对静态资源的访问由HandlerMapping转到org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler处理并返回.DefaultServletHttpRequestHandler使用就是各个Servlet容器自己的默认Servlet. -->
	<mvc:resources mapping="/theme/**" location="/theme/"
		cache-period="31556926" />
	<!-- 拦截器 -->
	<mvc:interceptors>
		<!-- 多个拦截器,顺序执行 -->
		<mvc:interceptor>
			<!-- <mvc:mapping path="/front/**" /> --><!-- 如果不配置或/*,将拦截所有的Controller -->
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/theme/**"/>
			<ref bean="titleInterceptor" />
			<!-- ref="<bean name="titleInterceptor" class="cn.anlaser.action.handler.TitleInterceptor" 
				/> -->
		</mvc:interceptor>
	</mvc:interceptors>
	<mvc:view-controller path="/" view-name="redirect:/site/index" />
	<!-- 上传设置 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="3000000" />
	</bean>

	<!-- REST 内容协商 -->
	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="mediaTypes">
			<value>
				json=application/json
				yson=application/json
				htm=text/html
				xml=application/xml
				html=text/html
			</value>
		</property>
		<property name="defaultContentType" value="text/html" />
		<property name="ignoreAcceptHeader" value="true" />
	</bean>
	<!-- <bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/layouts/layouts.xml</value>
				<value>/WEB-INF/layouts/views.xml</value>
			</list>
		</property>
	</bean>

	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<property name="order" value="1" />
	</bean> -->

	<!--配置一个管理spring bean的实体 -->
	<bean id="beanManager" class="cn.wsalix.spring.BeanManager"
		lazy-init="false" />
</beans>